Quicksorts in ATS2/Postiats
---------------------------

Quicksorts as ATS2 templates, configurable and extensible by the
template mechanism.

For the comparison, you can use either a strcmp-style function
(returning a signed integer) or a ‘less than’ predicate.

Where random numbers are used, they are computed by a built-in linear
congruential generator that is designed for speed.

----

#include "quicksorts/HATS/unstable-quicksort.hats"

This is an array quicksort of the usual, unstable kind. It uses O(1)
workspace.

The current default pivot is the median of first, middle, and last
elements. I have implemented other choices of pivot, should you prefer
one of them: randomly chosen element, an element in the middle, or the
median of three randomly chosen elements.

The default ‘small’ sort is a binary insertion sort that first checks
for an already-ordered prefix. You can use a Shell sort, instead, or
write your own sort.

You also can change the partitioning method. Two methods already are
provided.

----

#include "quicksorts/HATS/stable-quicksort.hats"

This is a *stable* array quicksort, and so (unlike most quicksorts)
uses O(n) workspace. It is possible to provide your own workspace.

The current ‘small’ sort is a binary insertion sort that first checks
for an already-ordered prefix. I have not implemented any others.

The current default pivot is the median of three randomly chosen
elements. You can also simply choose a pivot at random.
